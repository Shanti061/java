PACKAGES:

Packages are containers for classes. They are used to keep the class name space compartmentalized. For
example, a package allows you to create a class named List, which you can store in your own
package without concern that it will collide with some other class named List stored elsewhere.
Packages are stored in a hierarchical manner and are explicitly imported into new class
definitions.

Access Protection in pagkages:

Order: Private, No Modifier, Protected, Public

Same class: Y,Y,Y,Y
Same package subclass: N,Y,Y,Y
Same package non-subclass: N,Y,Y,Y
Different package subclass: N,N,Y,Y
Different package non-subclass: N,N,N,Y



INTERFACES:

Java allows you to fully abstract an interface from its implementation. Using interface, you can specify a set of methods that can be
implemented by one or more classes. In its traditional form, the interface, itself, does not
actually define any implementation. Although they are similar to abstract classes, interfaces
have an additional capability: A class can implement more than one interface.

Using the keyword interface, you can fully abstract a class’ interface from its implementation.
That is, using interface, you can specify what a class must do, but not how it does it.

By providing the interface keyword, Java allows you to fully utilize the “one interface,
multiple methods” aspect of polymorphism.

When no access modifier is included, then default access results, and the interface is only
available to other members of the package in which it is declared.

Beginning with JDK 8, it is possible to add a default implementation to an interface method.
Thus, it is now possible for interface to specify some behavior. However, default methods
constitute what is, in essence, a special-use feature, and the original intent behind interface
still remains.

If a class includes an interface but does not fully implement the methods required by that interface, then that class
must be declared as abstract.

Multiple Inheritance Issues:
- Java does not support the multiple inheritance of classes.
- A class can maintain state information (especially through the use of instance variables)
but an interface cannot.

For example, assume that two interfaces called Alpha and Beta are implemented by a
class called MyClass.

	Rules:
	1. A class implementation takes priority over an interface default implementation.
	
	Thus, if MyClass provides an override of the reset( ) default method,
	MyClass’ version is used.
	
	2. In cases in which a class implements two interfaces that both have the same default method,
	but the class does not override that method, then an error will result.
	
	if MyClass implements both Alpha and Beta, but does not
	override reset( ), then an error will occur.
	
	3. If one interface inherits another, with both defining a common default method,
	the inheriting interface's version of the method take precedence.

	if Beta extends Alpha, then Beta’s version of reset( ) will be used.
	
	
Use static Methods in an Interface:
JDK8 added another new capability to interface: the ability to define one or more static methods.

Like static methods in a class, a static method defined by an interface can be
called independently of any object. Thus, no implementation of the interface is necessary,
and no instance of the interface is required, in order to call a static method.